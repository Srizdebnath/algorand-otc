/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"Escrow","structs":{},"methods":[{"name":"create_application","args":[{"type":"uint64","name":"value"},{"type":"account","name":"seller"},{"type":"account","name":"buyer"},{"type":"account","name":"arbitrator"},{"type":"uint64","name":"escrow_duration"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"deposit_funds","args":[{"type":"pay","name":"payment"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"release_funds_to_seller","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"refund_funds_to_buyer","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"raise_dispute","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"resolve_dispute","args":[{"type":"string","name":"decision"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"expire_escrow","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"delete_application","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["DeleteApplication"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":5,"bytes":3},"local":{"ints":0,"bytes":0}},"keys":{"global":{"seller":{"keyType":"AVMString","valueType":"address","key":"c2VsbGVy"},"buyer":{"keyType":"AVMString","valueType":"address","key":"YnV5ZXI="},"arbitrator":{"keyType":"AVMString","valueType":"address","key":"YXJiaXRyYXRvcg=="},"amount":{"keyType":"AVMString","valueType":"AVMUint64","key":"YW1vdW50"},"escrow_expiry":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZXNjcm93X2V4cGlyeQ=="},"is_disputed":{"keyType":"AVMString","valueType":"AVMUint64","key":"aXNfZGlzcHV0ZWQ="},"is_settled":{"keyType":"AVMString","valueType":"AVMUint64","key":"aXNfc2V0dGxlZA=="},"value":{"keyType":"AVMString","valueType":"AVMUint64","key":"dmFsdWU="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[529],"errorMessage":"Dispute already raised"},{"pc":[636],"errorMessage":"Escrow has not expired yet"},{"pc":[621],"errorMessage":"Invalid decision"},{"pc":[562],"errorMessage":"No dispute to resolve"},{"pc":[151],"errorMessage":"OnCompletion is not DeleteApplication"},{"pc":[163,175,193,205,217,229,251],"errorMessage":"OnCompletion is not NoOp"},{"pc":[391],"errorMessage":"Only buyer or arbitrator can release funds"},{"pc":[522],"errorMessage":"Only buyer or seller can raise a dispute"},{"pc":[457],"errorMessage":"Only seller or arbitrator can refund funds"},{"pc":[556],"errorMessage":"Only the arbitrator can resolve disputes"},{"pc":[334],"errorMessage":"Only the buyer can deposit funds"},{"pc":[657],"errorMessage":"Only the creator can delete the application"},{"pc":[342],"errorMessage":"Payment must be sent to the escrow"},{"pc":[352],"errorMessage":"Payment must match the asset price"},{"pc":[358,397,463,535,568,642],"errorMessage":"Transaction is already settled"},{"pc":[651],"errorMessage":"Transaction must be settled before deleting"},{"pc":[255],"errorMessage":"can only call when creating"},{"pc":[154,166,178,196,208,220,232],"errorMessage":"can only call when not creating"},{"pc":[377,443,554],"errorMessage":"check self.arbitrator exists"},{"pc":[332,369,468,501],"errorMessage":"check self.buyer exists"},{"pc":[634],"errorMessage":"check self.escrow_expiry exists"},{"pc":[527,561],"errorMessage":"check self.is_disputed exists"},{"pc":[356,395,461,533,566,640,650],"errorMessage":"check self.is_settled exists"},{"pc":[402,435,508],"errorMessage":"check self.seller exists"},{"pc":[350,406,472],"errorMessage":"check self.value exists"},{"pc":[242],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiADAAHoByYHCmlzX3NldHRsZWQFYnV5ZXIFdmFsdWUGc2VsbGVyCmFyYml0cmF0b3ILaXNfZGlzcHV0ZWQNZXNjcm93X2V4cGlyeTEbQQA/gggEP+TTmgT9xpXCBDHOdZcENMl5yQRDmCZdBJG0UyoEUSH3QQQzs0meNhoAjggAaABSAEYAOgAuABwAEAACIkMxGYEFEkQxGESIAekjQzEZFEQxGESIAcojQzEZFEQxGEQ2GgFXAgCIAWUjQzEZFEQxGESIASQjQzEZFEQxGESIANYjQzEZFEQxGESIAIgjQzEZFEQxGEQxFiMJSTgQIxJEiABOI0MxGRREMRgURDYaARc2GgIXwBw2GgMXwBw2GgQXwBw2GgUXiAACI0OKBQAqi/tnK4v8ZymL/WcnBIv+ZzIHi/8IJwZMZycFImcoImeJigEAMQAiKWVEEkSL/zgHMgoSRIv/OAgiKmVEEkQiKGVEFESJigAAMQBJIillRCInBGVMTgNEEkAACIsAiwESQQAgI0QiKGVEFESxIitlRCIqZUSyCLIHI7IQJLIBsygjZ4kiQv/digAAMQBJIitlRCInBGVMTgNEEkAACIsAiwESQQAgI0QiKGVEFESxIillRCIqZUSyCLIHI7IQJLIBsygjZ4kiQv/digAAMQBJIillRCIrZUxOA0QSQAAIiwCLARJBABQjRCInBWVEFEQiKGVEFEQnBSNniSJC/+mKAQAxACInBGVEEkQiJwVlREQiKGVEFESL/4ARcmVsZWFzZV90b19zZWxsZXISQQAHiP8TKCNniYv/gA9yZWZ1bmRfdG9fYnV5ZXISRIj/OUL/4TIHIicGZUQPRCIoZUQURIj/JIkiKGVERDEAMgkSRIk=","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":10,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Escrow contract
 */
export type EscrowArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create_application(uint64,account,account,account,uint64)void': {
      value: bigint | number
      seller: Uint8Array | string
      buyer: Uint8Array | string
      arbitrator: Uint8Array | string
      escrowDuration: bigint | number
    }
    'deposit_funds(pay)void': {
      payment: AppMethodCallTransactionArgument
    }
    'release_funds_to_seller()void': Record<string, never>
    'refund_funds_to_buyer()void': Record<string, never>
    'raise_dispute()void': Record<string, never>
    'resolve_dispute(string)void': {
      decision: string
    }
    'expire_escrow()void': Record<string, never>
    'delete_application()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create_application(uint64,account,account,account,uint64)void': [value: bigint | number, seller: Uint8Array | string, buyer: Uint8Array | string, arbitrator: Uint8Array | string, escrowDuration: bigint | number]
    'deposit_funds(pay)void': [payment: AppMethodCallTransactionArgument]
    'release_funds_to_seller()void': []
    'refund_funds_to_buyer()void': []
    'raise_dispute()void': []
    'resolve_dispute(string)void': [decision: string]
    'expire_escrow()void': []
    'delete_application()void': []
  }
}

/**
 * The return type for each method
 */
export type EscrowReturns = {
  'create_application(uint64,account,account,account,uint64)void': void
  'deposit_funds(pay)void': void
  'release_funds_to_seller()void': void
  'refund_funds_to_buyer()void': void
  'raise_dispute()void': void
  'resolve_dispute(string)void': void
  'expire_escrow()void': void
  'delete_application()void': void
}

/**
 * Defines the types of available calls and state of the Escrow smart contract.
 */
export type EscrowTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create_application(uint64,account,account,account,uint64)void' | 'create_application', {
      argsObj: EscrowArgs['obj']['create_application(uint64,account,account,account,uint64)void']
      argsTuple: EscrowArgs['tuple']['create_application(uint64,account,account,account,uint64)void']
      returns: EscrowReturns['create_application(uint64,account,account,account,uint64)void']
    }>
    & Record<'deposit_funds(pay)void' | 'deposit_funds', {
      argsObj: EscrowArgs['obj']['deposit_funds(pay)void']
      argsTuple: EscrowArgs['tuple']['deposit_funds(pay)void']
      returns: EscrowReturns['deposit_funds(pay)void']
    }>
    & Record<'release_funds_to_seller()void' | 'release_funds_to_seller', {
      argsObj: EscrowArgs['obj']['release_funds_to_seller()void']
      argsTuple: EscrowArgs['tuple']['release_funds_to_seller()void']
      returns: EscrowReturns['release_funds_to_seller()void']
    }>
    & Record<'refund_funds_to_buyer()void' | 'refund_funds_to_buyer', {
      argsObj: EscrowArgs['obj']['refund_funds_to_buyer()void']
      argsTuple: EscrowArgs['tuple']['refund_funds_to_buyer()void']
      returns: EscrowReturns['refund_funds_to_buyer()void']
    }>
    & Record<'raise_dispute()void' | 'raise_dispute', {
      argsObj: EscrowArgs['obj']['raise_dispute()void']
      argsTuple: EscrowArgs['tuple']['raise_dispute()void']
      returns: EscrowReturns['raise_dispute()void']
    }>
    & Record<'resolve_dispute(string)void' | 'resolve_dispute', {
      argsObj: EscrowArgs['obj']['resolve_dispute(string)void']
      argsTuple: EscrowArgs['tuple']['resolve_dispute(string)void']
      returns: EscrowReturns['resolve_dispute(string)void']
    }>
    & Record<'expire_escrow()void' | 'expire_escrow', {
      argsObj: EscrowArgs['obj']['expire_escrow()void']
      argsTuple: EscrowArgs['tuple']['expire_escrow()void']
      returns: EscrowReturns['expire_escrow()void']
    }>
    & Record<'delete_application()void' | 'delete_application', {
      argsObj: EscrowArgs['obj']['delete_application()void']
      argsTuple: EscrowArgs['tuple']['delete_application()void']
      returns: EscrowReturns['delete_application()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        seller: string
        buyer: string
        arbitrator: string
        amount: bigint
        escrowExpiry: bigint
        isDisputed: bigint
        isSettled: bigint
        value: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type EscrowSignatures = keyof EscrowTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type EscrowNonVoidMethodSignatures = keyof EscrowTypes['methods'] extends infer T ? T extends keyof EscrowTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Escrow smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends EscrowSignatures> = EscrowTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Escrow smart contract to the method's return type
 */
export type MethodReturn<TSignature extends EscrowSignatures> = EscrowTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = EscrowTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type EscrowCreateCallParams =
  | Expand<CallParams<EscrowArgs['obj']['create_application(uint64,account,account,account,uint64)void'] | EscrowArgs['tuple']['create_application(uint64,account,account,account,uint64)void']> & {method: 'create_application'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<EscrowArgs['obj']['create_application(uint64,account,account,account,uint64)void'] | EscrowArgs['tuple']['create_application(uint64,account,account,account,uint64)void']> & {method: 'create_application(uint64,account,account,account,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported delete method params for this smart contract
 */
export type EscrowDeleteCallParams =
  | Expand<CallParams<EscrowArgs['obj']['delete_application()void'] | EscrowArgs['tuple']['delete_application()void']> & {method: 'delete_application'}>
  | Expand<CallParams<EscrowArgs['obj']['delete_application()void'] | EscrowArgs['tuple']['delete_application()void']> & {method: 'delete_application()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type EscrowDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: EscrowCreateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: EscrowDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Escrow smart contract
 */
export abstract class EscrowParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends EscrowCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'create_application':
          case 'create_application(uint64,account,account,account,uint64)void':
            return EscrowParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the Escrow smart contract using the create_application(uint64,account,account,account,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<EscrowArgs['obj']['create_application(uint64,account,account,account,uint64)void'] | EscrowArgs['tuple']['create_application(uint64,account,account,account,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'create_application(uint64,account,account,account,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.value, params.args.seller, params.args.buyer, params.args.arbitrator, params.args.escrowDuration],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends EscrowDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'delete_application':
          case 'delete_application()void':
            return EscrowParamsFactory.delete.deleteApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the Escrow smart contract using the delete_application()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      deleteApplication(params: CallParams<EscrowArgs['obj']['delete_application()void'] | EscrowArgs['tuple']['delete_application()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'delete_application()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the deposit_funds(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static depositFunds(params: CallParams<EscrowArgs['obj']['deposit_funds(pay)void'] | EscrowArgs['tuple']['deposit_funds(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'deposit_funds(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payment],
    }
  }
  /**
   * Constructs a no op call for the release_funds_to_seller()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static releaseFundsToSeller(params: CallParams<EscrowArgs['obj']['release_funds_to_seller()void'] | EscrowArgs['tuple']['release_funds_to_seller()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'release_funds_to_seller()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the refund_funds_to_buyer()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static refundFundsToBuyer(params: CallParams<EscrowArgs['obj']['refund_funds_to_buyer()void'] | EscrowArgs['tuple']['refund_funds_to_buyer()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'refund_funds_to_buyer()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the raise_dispute()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static raiseDispute(params: CallParams<EscrowArgs['obj']['raise_dispute()void'] | EscrowArgs['tuple']['raise_dispute()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'raise_dispute()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the resolve_dispute(string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static resolveDispute(params: CallParams<EscrowArgs['obj']['resolve_dispute(string)void'] | EscrowArgs['tuple']['resolve_dispute(string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'resolve_dispute(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.decision],
    }
  }
  /**
   * Constructs a no op call for the expire_escrow()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static expireEscrow(params: CallParams<EscrowArgs['obj']['expire_escrow()void'] | EscrowArgs['tuple']['expire_escrow()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'expire_escrow()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Escrow smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class EscrowFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `EscrowFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new EscrowClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new EscrowClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Escrow smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: EscrowDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? EscrowParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (EscrowCreateCallParams & { args: Uint8Array[] }) : undefined,
      deleteParams: params.deleteParams?.method ? EscrowParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams ? params.deleteParams as (EscrowDeleteCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new EscrowClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Escrow smart contract using the create_application(uint64,account,account,account,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<EscrowArgs['obj']['create_application(uint64,account,account,account,uint64)void'] | EscrowArgs['tuple']['create_application(uint64,account,account,account,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(EscrowParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the Escrow smart contract using the delete_application()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      deleteApplication: (params: CallParams<EscrowArgs['obj']['delete_application()void'] | EscrowArgs['tuple']['delete_application()void']> = {args: []}) => {
        return this.appFactory.params.deployDelete(EscrowParamsFactory.delete.deleteApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Escrow smart contract using the create_application(uint64,account,account,account,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<EscrowArgs['obj']['create_application(uint64,account,account,account,uint64)void'] | EscrowArgs['tuple']['create_application(uint64,account,account,account,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(EscrowParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Escrow smart contract using an ABI method call using the create_application(uint64,account,account,account,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<EscrowArgs['obj']['create_application(uint64,account,account,account,uint64)void'] | EscrowArgs['tuple']['create_application(uint64,account,account,account,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(EscrowParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | EscrowReturns['create_application(uint64,account,account,account,uint64)void']) }, appClient: new EscrowClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Escrow smart contract
 */
export class EscrowClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `EscrowClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Escrow app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `EscrowClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends EscrowNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `EscrowClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<EscrowClient> {
    return new EscrowClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `EscrowClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<EscrowClient> {
    return new EscrowClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the Escrow smart contract using the `delete_application()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      deleteApplication: (params: CallParams<EscrowArgs['obj']['delete_application()void'] | EscrowArgs['tuple']['delete_application()void']> = {args: []}) => {
        return this.appClient.params.delete(EscrowParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Escrow smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Escrow smart contract using the `deposit_funds(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    depositFunds: (params: CallParams<EscrowArgs['obj']['deposit_funds(pay)void'] | EscrowArgs['tuple']['deposit_funds(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EscrowParamsFactory.depositFunds(params))
    },

    /**
     * Makes a call to the Escrow smart contract using the `release_funds_to_seller()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    releaseFundsToSeller: (params: CallParams<EscrowArgs['obj']['release_funds_to_seller()void'] | EscrowArgs['tuple']['release_funds_to_seller()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(EscrowParamsFactory.releaseFundsToSeller(params))
    },

    /**
     * Makes a call to the Escrow smart contract using the `refund_funds_to_buyer()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    refundFundsToBuyer: (params: CallParams<EscrowArgs['obj']['refund_funds_to_buyer()void'] | EscrowArgs['tuple']['refund_funds_to_buyer()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(EscrowParamsFactory.refundFundsToBuyer(params))
    },

    /**
     * Makes a call to the Escrow smart contract using the `raise_dispute()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    raiseDispute: (params: CallParams<EscrowArgs['obj']['raise_dispute()void'] | EscrowArgs['tuple']['raise_dispute()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(EscrowParamsFactory.raiseDispute(params))
    },

    /**
     * Makes a call to the Escrow smart contract using the `resolve_dispute(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    resolveDispute: (params: CallParams<EscrowArgs['obj']['resolve_dispute(string)void'] | EscrowArgs['tuple']['resolve_dispute(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(EscrowParamsFactory.resolveDispute(params))
    },

    /**
     * Makes a call to the Escrow smart contract using the `expire_escrow()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    expireEscrow: (params: CallParams<EscrowArgs['obj']['expire_escrow()void'] | EscrowArgs['tuple']['expire_escrow()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(EscrowParamsFactory.expireEscrow(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the Escrow smart contract using the `delete_application()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      deleteApplication: (params: CallParams<EscrowArgs['obj']['delete_application()void'] | EscrowArgs['tuple']['delete_application()void']> = {args: []}) => {
        return this.appClient.createTransaction.delete(EscrowParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Escrow smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Escrow smart contract using the `deposit_funds(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    depositFunds: (params: CallParams<EscrowArgs['obj']['deposit_funds(pay)void'] | EscrowArgs['tuple']['deposit_funds(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EscrowParamsFactory.depositFunds(params))
    },

    /**
     * Makes a call to the Escrow smart contract using the `release_funds_to_seller()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    releaseFundsToSeller: (params: CallParams<EscrowArgs['obj']['release_funds_to_seller()void'] | EscrowArgs['tuple']['release_funds_to_seller()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(EscrowParamsFactory.releaseFundsToSeller(params))
    },

    /**
     * Makes a call to the Escrow smart contract using the `refund_funds_to_buyer()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    refundFundsToBuyer: (params: CallParams<EscrowArgs['obj']['refund_funds_to_buyer()void'] | EscrowArgs['tuple']['refund_funds_to_buyer()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(EscrowParamsFactory.refundFundsToBuyer(params))
    },

    /**
     * Makes a call to the Escrow smart contract using the `raise_dispute()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    raiseDispute: (params: CallParams<EscrowArgs['obj']['raise_dispute()void'] | EscrowArgs['tuple']['raise_dispute()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(EscrowParamsFactory.raiseDispute(params))
    },

    /**
     * Makes a call to the Escrow smart contract using the `resolve_dispute(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    resolveDispute: (params: CallParams<EscrowArgs['obj']['resolve_dispute(string)void'] | EscrowArgs['tuple']['resolve_dispute(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(EscrowParamsFactory.resolveDispute(params))
    },

    /**
     * Makes a call to the Escrow smart contract using the `expire_escrow()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    expireEscrow: (params: CallParams<EscrowArgs['obj']['expire_escrow()void'] | EscrowArgs['tuple']['expire_escrow()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(EscrowParamsFactory.expireEscrow(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the Escrow smart contract using the `delete_application()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      deleteApplication: async (params: CallParams<EscrowArgs['obj']['delete_application()void'] | EscrowArgs['tuple']['delete_application()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.delete(EscrowParamsFactory.delete.deleteApplication(params))
        return {...result, return: result.return as unknown as (undefined | EscrowReturns['delete_application()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the Escrow smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Escrow smart contract using the `deposit_funds(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    depositFunds: async (params: CallParams<EscrowArgs['obj']['deposit_funds(pay)void'] | EscrowArgs['tuple']['deposit_funds(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EscrowParamsFactory.depositFunds(params))
      return {...result, return: result.return as unknown as (undefined | EscrowReturns['deposit_funds(pay)void'])}
    },

    /**
     * Makes a call to the Escrow smart contract using the `release_funds_to_seller()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    releaseFundsToSeller: async (params: CallParams<EscrowArgs['obj']['release_funds_to_seller()void'] | EscrowArgs['tuple']['release_funds_to_seller()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(EscrowParamsFactory.releaseFundsToSeller(params))
      return {...result, return: result.return as unknown as (undefined | EscrowReturns['release_funds_to_seller()void'])}
    },

    /**
     * Makes a call to the Escrow smart contract using the `refund_funds_to_buyer()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    refundFundsToBuyer: async (params: CallParams<EscrowArgs['obj']['refund_funds_to_buyer()void'] | EscrowArgs['tuple']['refund_funds_to_buyer()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(EscrowParamsFactory.refundFundsToBuyer(params))
      return {...result, return: result.return as unknown as (undefined | EscrowReturns['refund_funds_to_buyer()void'])}
    },

    /**
     * Makes a call to the Escrow smart contract using the `raise_dispute()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    raiseDispute: async (params: CallParams<EscrowArgs['obj']['raise_dispute()void'] | EscrowArgs['tuple']['raise_dispute()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(EscrowParamsFactory.raiseDispute(params))
      return {...result, return: result.return as unknown as (undefined | EscrowReturns['raise_dispute()void'])}
    },

    /**
     * Makes a call to the Escrow smart contract using the `resolve_dispute(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    resolveDispute: async (params: CallParams<EscrowArgs['obj']['resolve_dispute(string)void'] | EscrowArgs['tuple']['resolve_dispute(string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(EscrowParamsFactory.resolveDispute(params))
      return {...result, return: result.return as unknown as (undefined | EscrowReturns['resolve_dispute(string)void'])}
    },

    /**
     * Makes a call to the Escrow smart contract using the `expire_escrow()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    expireEscrow: async (params: CallParams<EscrowArgs['obj']['expire_escrow()void'] | EscrowArgs['tuple']['expire_escrow()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(EscrowParamsFactory.expireEscrow(params))
      return {...result, return: result.return as unknown as (undefined | EscrowReturns['expire_escrow()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new EscrowClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Escrow app
   */
  state = {
    /**
     * Methods to access global state for the current Escrow app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          seller: result.seller,
          buyer: result.buyer,
          arbitrator: result.arbitrator,
          amount: result.amount,
          escrowExpiry: result.escrow_expiry,
          isDisputed: result.is_disputed,
          isSettled: result.is_settled,
          value: result.value,
        }
      },
      /**
       * Get the current value of the seller key in global state
       */
      seller: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("seller")) as string | undefined },
      /**
       * Get the current value of the buyer key in global state
       */
      buyer: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("buyer")) as string | undefined },
      /**
       * Get the current value of the arbitrator key in global state
       */
      arbitrator: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("arbitrator")) as string | undefined },
      /**
       * Get the current value of the amount key in global state
       */
      amount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("amount")) as bigint | undefined },
      /**
       * Get the current value of the escrow_expiry key in global state
       */
      escrowExpiry: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("escrow_expiry")) as bigint | undefined },
      /**
       * Get the current value of the is_disputed key in global state
       */
      isDisputed: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("is_disputed")) as bigint | undefined },
      /**
       * Get the current value of the is_settled key in global state
       */
      isSettled: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("is_settled")) as bigint | undefined },
      /**
       * Get the current value of the value key in global state
       */
      value: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("value")) as bigint | undefined },
    },
  }

  public newGroup(): EscrowComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a deposit_funds(pay)void method call against the Escrow contract
       */
      depositFunds(params: CallParams<EscrowArgs['obj']['deposit_funds(pay)void'] | EscrowArgs['tuple']['deposit_funds(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.depositFunds(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a release_funds_to_seller()void method call against the Escrow contract
       */
      releaseFundsToSeller(params: CallParams<EscrowArgs['obj']['release_funds_to_seller()void'] | EscrowArgs['tuple']['release_funds_to_seller()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.releaseFundsToSeller(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a refund_funds_to_buyer()void method call against the Escrow contract
       */
      refundFundsToBuyer(params: CallParams<EscrowArgs['obj']['refund_funds_to_buyer()void'] | EscrowArgs['tuple']['refund_funds_to_buyer()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.refundFundsToBuyer(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a raise_dispute()void method call against the Escrow contract
       */
      raiseDispute(params: CallParams<EscrowArgs['obj']['raise_dispute()void'] | EscrowArgs['tuple']['raise_dispute()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.raiseDispute(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a resolve_dispute(string)void method call against the Escrow contract
       */
      resolveDispute(params: CallParams<EscrowArgs['obj']['resolve_dispute(string)void'] | EscrowArgs['tuple']['resolve_dispute(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.resolveDispute(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a expire_escrow()void method call against the Escrow contract
       */
      expireEscrow(params: CallParams<EscrowArgs['obj']['expire_escrow()void'] | EscrowArgs['tuple']['expire_escrow()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.expireEscrow(params)))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        return {
          deleteApplication: (params: CallParams<EscrowArgs['obj']['delete_application()void'] | EscrowArgs['tuple']['delete_application()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.deleteApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the Escrow contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as EscrowComposer
  }
}
export type EscrowComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the deposit_funds(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  depositFunds(params?: CallParams<EscrowArgs['obj']['deposit_funds(pay)void'] | EscrowArgs['tuple']['deposit_funds(pay)void']>): EscrowComposer<[...TReturns, EscrowReturns['deposit_funds(pay)void'] | undefined]>

  /**
   * Calls the release_funds_to_seller()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  releaseFundsToSeller(params?: CallParams<EscrowArgs['obj']['release_funds_to_seller()void'] | EscrowArgs['tuple']['release_funds_to_seller()void']>): EscrowComposer<[...TReturns, EscrowReturns['release_funds_to_seller()void'] | undefined]>

  /**
   * Calls the refund_funds_to_buyer()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  refundFundsToBuyer(params?: CallParams<EscrowArgs['obj']['refund_funds_to_buyer()void'] | EscrowArgs['tuple']['refund_funds_to_buyer()void']>): EscrowComposer<[...TReturns, EscrowReturns['refund_funds_to_buyer()void'] | undefined]>

  /**
   * Calls the raise_dispute()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  raiseDispute(params?: CallParams<EscrowArgs['obj']['raise_dispute()void'] | EscrowArgs['tuple']['raise_dispute()void']>): EscrowComposer<[...TReturns, EscrowReturns['raise_dispute()void'] | undefined]>

  /**
   * Calls the resolve_dispute(string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  resolveDispute(params?: CallParams<EscrowArgs['obj']['resolve_dispute(string)void'] | EscrowArgs['tuple']['resolve_dispute(string)void']>): EscrowComposer<[...TReturns, EscrowReturns['resolve_dispute(string)void'] | undefined]>

  /**
   * Calls the expire_escrow()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  expireEscrow(params?: CallParams<EscrowArgs['obj']['expire_escrow()void'] | EscrowArgs['tuple']['expire_escrow()void']>): EscrowComposer<[...TReturns, EscrowReturns['expire_escrow()void'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the Escrow smart contract using the delete_application()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(params?: CallParams<EscrowArgs['obj']['delete_application()void'] | EscrowArgs['tuple']['delete_application()void']>): EscrowComposer<[...TReturns, EscrowReturns['delete_application()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the Escrow smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): EscrowComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): EscrowComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<EscrowComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<EscrowComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<EscrowComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<EscrowComposerResults<TReturns>>
}
export type EscrowComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

