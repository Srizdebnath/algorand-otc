/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"OTCSwap","structs":{},"methods":[{"name":"create_application","args":[{"type":"asset","name":"asset_a"},{"type":"uint64","name":"asset_a_amount"},{"type":"asset","name":"asset_b"},{"type":"uint64","name":"asset_b_amount"},{"type":"uint64","name":"expiry_rounds"},{"type":"account","name":"taker"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"accept_offer","args":[{"type":"axfer","name":"taker_transfer"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"reclaim_assets","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"delete_application","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["DeleteApplication"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":6,"bytes":2},"local":{"ints":0,"bytes":0}},"keys":{"global":{"maker":{"keyType":"AVMString","valueType":"address","key":"bWFrZXI="},"taker":{"keyType":"AVMString","valueType":"address","key":"dGFrZXI="},"asset_a":{"keyType":"AVMString","valueType":"AVMUint64","key":"YXNzZXRfYQ=="},"asset_a_amount":{"keyType":"AVMString","valueType":"AVMUint64","key":"YXNzZXRfYV9hbW91bnQ="},"asset_b":{"keyType":"AVMString","valueType":"AVMUint64","key":"YXNzZXRfYg=="},"asset_b_amount":{"keyType":"AVMString","valueType":"AVMUint64","key":"YXNzZXRfYl9hbW91bnQ="},"offer_expiry":{"keyType":"AVMString","valueType":"AVMUint64","key":"b2ZmZXJfZXhwaXJ5"},"is_completed":{"keyType":"AVMString","valueType":"AVMUint64","key":"aXNfY29tcGxldGVk"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[318],"errorMessage":"Maker cannot accept own offer"},{"pc":[326],"errorMessage":"Must send to app"},{"pc":[287],"errorMessage":"Offer expired"},{"pc":[411],"errorMessage":"Offer not expired"},{"pc":[141],"errorMessage":"OnCompletion is not DeleteApplication"},{"pc":[153,165,187],"errorMessage":"OnCompletion is not NoOp"},{"pc":[307],"errorMessage":"Only assigned taker can accept"},{"pc":[461],"errorMessage":"Only maker can delete"},{"pc":[422],"errorMessage":"Only maker can reclaim"},{"pc":[278,402],"errorMessage":"Swap already completed"},{"pc":[453],"errorMessage":"Swap must be completed or expired"},{"pc":[354],"errorMessage":"Wrong amount sent"},{"pc":[340],"errorMessage":"Wrong asset sent"},{"pc":[191],"errorMessage":"can only call when creating"},{"pc":[144,156,168],"errorMessage":"can only call when not creating"},{"pc":[359,427],"errorMessage":"check self.asset_a exists"},{"pc":[365,431],"errorMessage":"check self.asset_a_amount exists"},{"pc":[335],"errorMessage":"check self.asset_b exists"},{"pc":[349],"errorMessage":"check self.asset_b_amount exists"},{"pc":[276,400,452],"errorMessage":"check self.is_completed exists"},{"pc":[313,417,459],"errorMessage":"check self.maker exists"},{"pc":[285,409],"errorMessage":"check self.offer_expiry exists"},{"pc":[292,305],"errorMessage":"check self.taker exists"},{"pc":[178],"errorMessage":"transaction type is axfer"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuYXBwcm92YWxfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIGludGNibG9jayAwIDEgNCAxMDAwCiAgICBieXRlY2Jsb2NrICJpc19jb21wbGV0ZWQiICJtYWtlciIgImFzc2V0X2EiICJhc3NldF9hX2Ftb3VudCIgIm9mZmVyX2V4cGlyeSIgInRha2VyIiAiYXNzZXRfYiIgImFzc2V0X2JfYW1vdW50IgogICAgLy8gc21hcnRfY29udHJhY3RzL290Yy9jb250cmFjdC5weTo1CiAgICAvLyBjbGFzcyBPVENTd2FwKEFSQzRDb250cmFjdCk6CiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogbWFpbl9hZnRlcl9pZl9lbHNlQDEwCiAgICBwdXNoYnl0ZXNzIDB4NmRlYTA3OTQgMHg3NzJlNWJjYyAweDRmMTdkMjM4IDB4MzNiMzQ5OWUgLy8gbWV0aG9kICJjcmVhdGVfYXBwbGljYXRpb24oYXNzZXQsdWludDY0LGFzc2V0LHVpbnQ2NCx1aW50NjQsYWNjb3VudCl2b2lkIiwgbWV0aG9kICJhY2NlcHRfb2ZmZXIoYXhmZXIpdm9pZCIsIG1ldGhvZCAicmVjbGFpbV9hc3NldHMoKXZvaWQiLCBtZXRob2QgImRlbGV0ZV9hcHBsaWNhdGlvbigpdm9pZCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5fY3JlYXRlX2FwcGxpY2F0aW9uX3JvdXRlQDMgbWFpbl9hY2NlcHRfb2ZmZXJfcm91dGVANCBtYWluX3JlY2xhaW1fYXNzZXRzX3JvdXRlQDUgbWFpbl9kZWxldGVfYXBwbGljYXRpb25fcm91dGVANgoKbWFpbl9hZnRlcl9pZl9lbHNlQDEwOgogICAgLy8gc21hcnRfY29udHJhY3RzL290Yy9jb250cmFjdC5weTo1CiAgICAvLyBjbGFzcyBPVENTd2FwKEFSQzRDb250cmFjdCk6CiAgICBpbnRjXzAgLy8gMAogICAgcmV0dXJuCgptYWluX2RlbGV0ZV9hcHBsaWNhdGlvbl9yb3V0ZUA2OgogICAgLy8gc21hcnRfY29udHJhY3RzL290Yy9jb250cmFjdC5weTo4NS04NgogICAgLy8gIyBEZWxldGUgYXBwIChtYWtlciBvbmx5LCBhZnRlciBjb21wbGV0aW9uKQogICAgLy8gQGFiaW1ldGhvZChhbGxvd19hY3Rpb25zPVsiRGVsZXRlQXBwbGljYXRpb24iXSkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIHB1c2hpbnQgNSAvLyBEZWxldGVBcHBsaWNhdGlvbgogICAgPT0KICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IERlbGV0ZUFwcGxpY2F0aW9uCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgZGVsZXRlX2FwcGxpY2F0aW9uCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX3JlY2xhaW1fYXNzZXRzX3JvdXRlQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3RjL2NvbnRyYWN0LnB5OjY4LTY5CiAgICAvLyAjIFJlY2xhaW0gQXNzZXQgQSBpZiBvZmZlciBleHBpcmVzIChtYWtlciBvbmx5KQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgcmVjbGFpbV9hc3NldHMKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYWNjZXB0X29mZmVyX3JvdXRlQDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3RjL2NvbnRyYWN0LnB5OjM2LTM3CiAgICAvLyAjIEFjY2VwdCBvZmZlciAodGFrZXIgZGVwb3NpdHMgQXNzZXQgQiwgc3dhcCBleGVjdXRlcykKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3RjL2NvbnRyYWN0LnB5OjUKICAgIC8vIGNsYXNzIE9UQ1N3YXAoQVJDNENvbnRyYWN0KToKICAgIHR4biBHcm91cEluZGV4CiAgICBpbnRjXzEgLy8gMQogICAgLQogICAgZHVwCiAgICBndHhucyBUeXBlRW51bQogICAgaW50Y18yIC8vIGF4ZmVyCiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgYXhmZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vdGMvY29udHJhY3QucHk6MzYtMzcKICAgIC8vICMgQWNjZXB0IG9mZmVyICh0YWtlciBkZXBvc2l0cyBBc3NldCBCLCBzd2FwIGV4ZWN1dGVzKQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICBjYWxsc3ViIGFjY2VwdF9vZmZlcgogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9jcmVhdGVfYXBwbGljYXRpb25fcm91dGVAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vdGMvY29udHJhY3QucHk6MTYtMTcKICAgIC8vICMgQ3JlYXRlIGFwcGxpY2F0aW9uCiAgICAvLyBAYWJpbWV0aG9kKGFsbG93X2FjdGlvbnM9WyJOb09wIl0sIGNyZWF0ZT0icmVxdWlyZSIpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL290Yy9jb250cmFjdC5weTo1CiAgICAvLyBjbGFzcyBPVENTd2FwKEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hcyBBc3NldHMKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGJ0b2kKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIGJ0b2kKICAgIHR4bmFzIEFzc2V0cwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNAogICAgYnRvaQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNQogICAgYnRvaQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNgogICAgYnRvaQogICAgdHhuYXMgQWNjb3VudHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vdGMvY29udHJhY3QucHk6MTYtMTcKICAgIC8vICMgQ3JlYXRlIGFwcGxpY2F0aW9uCiAgICAvLyBAYWJpbWV0aG9kKGFsbG93X2FjdGlvbnM9WyJOb09wIl0sIGNyZWF0ZT0icmVxdWlyZSIpCiAgICBjYWxsc3ViIGNyZWF0ZV9hcHBsaWNhdGlvbgogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5vdGMuY29udHJhY3QuT1RDU3dhcC5jcmVhdGVfYXBwbGljYXRpb24oYXNzZXRfYTogdWludDY0LCBhc3NldF9hX2Ftb3VudDogdWludDY0LCBhc3NldF9iOiB1aW50NjQsIGFzc2V0X2JfYW1vdW50OiB1aW50NjQsIGV4cGlyeV9yb3VuZHM6IHVpbnQ2NCwgdGFrZXI6IGJ5dGVzKSAtPiB2b2lkOgpjcmVhdGVfYXBwbGljYXRpb246CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3RjL2NvbnRyYWN0LnB5OjE2LTI2CiAgICAvLyAjIENyZWF0ZSBhcHBsaWNhdGlvbgogICAgLy8gQGFiaW1ldGhvZChhbGxvd19hY3Rpb25zPVsiTm9PcCJdLCBjcmVhdGU9InJlcXVpcmUiKQogICAgLy8gZGVmIGNyZWF0ZV9hcHBsaWNhdGlvbigKICAgIC8vICAgICBzZWxmLAogICAgLy8gICAgIGFzc2V0X2E6IEFzc2V0LAogICAgLy8gICAgIGFzc2V0X2FfYW1vdW50OiBVSW50NjQsCiAgICAvLyAgICAgYXNzZXRfYjogQXNzZXQsCiAgICAvLyAgICAgYXNzZXRfYl9hbW91bnQ6IFVJbnQ2NCwKICAgIC8vICAgICBleHBpcnlfcm91bmRzOiBVSW50NjQsCiAgICAvLyAgICAgdGFrZXI6IEFjY291bnQsCiAgICAvLyApIC0+IE5vbmU6CiAgICBwcm90byA2IDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vdGMvY29udHJhY3QucHk6MjcKICAgIC8vIHNlbGYubWFrZXIgPSBUeG4uc2VuZGVyCiAgICBieXRlY18xIC8vICJtYWtlciIKICAgIHR4biBTZW5kZXIKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3RjL2NvbnRyYWN0LnB5OjI4CiAgICAvLyBzZWxmLmFzc2V0X2EgPSBhc3NldF9hCiAgICBieXRlY18yIC8vICJhc3NldF9hIgogICAgZnJhbWVfZGlnIC02CiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL290Yy9jb250cmFjdC5weToyOQogICAgLy8gc2VsZi5hc3NldF9hX2Ftb3VudCA9IGFzc2V0X2FfYW1vdW50CiAgICBieXRlY18zIC8vICJhc3NldF9hX2Ftb3VudCIKICAgIGZyYW1lX2RpZyAtNQogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vdGMvY29udHJhY3QucHk6MzAKICAgIC8vIHNlbGYuYXNzZXRfYiA9IGFzc2V0X2IKICAgIGJ5dGVjIDYgLy8gImFzc2V0X2IiCiAgICBmcmFtZV9kaWcgLTQKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3RjL2NvbnRyYWN0LnB5OjMxCiAgICAvLyBzZWxmLmFzc2V0X2JfYW1vdW50ID0gYXNzZXRfYl9hbW91bnQKICAgIGJ5dGVjIDcgLy8gImFzc2V0X2JfYW1vdW50IgogICAgZnJhbWVfZGlnIC0zCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL290Yy9jb250cmFjdC5weTozMgogICAgLy8gc2VsZi5vZmZlcl9leHBpcnkgPSBHbG9iYWwucm91bmQgKyBleHBpcnlfcm91bmRzCiAgICBnbG9iYWwgUm91bmQKICAgIGZyYW1lX2RpZyAtMgogICAgKwogICAgYnl0ZWMgNCAvLyAib2ZmZXJfZXhwaXJ5IgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vdGMvY29udHJhY3QucHk6MzMKICAgIC8vIHNlbGYudGFrZXIgPSB0YWtlcgogICAgYnl0ZWMgNSAvLyAidGFrZXIiCiAgICBmcmFtZV9kaWcgLTEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3RjL2NvbnRyYWN0LnB5OjM0CiAgICAvLyBzZWxmLmlzX2NvbXBsZXRlZCA9IEZhbHNlCiAgICBieXRlY18wIC8vICJpc19jb21wbGV0ZWQiCiAgICBpbnRjXzAgLy8gMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5vdGMuY29udHJhY3QuT1RDU3dhcC5hY2NlcHRfb2ZmZXIodGFrZXJfdHJhbnNmZXI6IHVpbnQ2NCkgLT4gdm9pZDoKYWNjZXB0X29mZmVyOgogICAgLy8gc21hcnRfY29udHJhY3RzL290Yy9jb250cmFjdC5weTozNi0zOAogICAgLy8gIyBBY2NlcHQgb2ZmZXIgKHRha2VyIGRlcG9zaXRzIEFzc2V0IEIsIHN3YXAgZXhlY3V0ZXMpCiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIC8vIGRlZiBhY2NlcHRfb2ZmZXIoc2VsZiwgdGFrZXJfdHJhbnNmZXI6IGd0eG4uQXNzZXRUcmFuc2ZlclRyYW5zYWN0aW9uKSAtPiBOb25lOgogICAgcHJvdG8gMSAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3RjL2NvbnRyYWN0LnB5OjM5CiAgICAvLyBhc3NlcnQgbm90IHNlbGYuaXNfY29tcGxldGVkLCAiU3dhcCBhbHJlYWR5IGNvbXBsZXRlZCIKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJpc19jb21wbGV0ZWQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuaXNfY29tcGxldGVkIGV4aXN0cwogICAgIQogICAgYXNzZXJ0IC8vIFN3YXAgYWxyZWFkeSBjb21wbGV0ZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vdGMvY29udHJhY3QucHk6NDAKICAgIC8vIGFzc2VydCBHbG9iYWwucm91bmQgPCBzZWxmLm9mZmVyX2V4cGlyeSwgIk9mZmVyIGV4cGlyZWQiCiAgICBnbG9iYWwgUm91bmQKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA0IC8vICJvZmZlcl9leHBpcnkiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYub2ZmZXJfZXhwaXJ5IGV4aXN0cwogICAgPAogICAgYXNzZXJ0IC8vIE9mZmVyIGV4cGlyZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vdGMvY29udHJhY3QucHk6NDEKICAgIC8vIGlmIHNlbGYudGFrZXIgIT0gR2xvYmFsLnplcm9fYWRkcmVzczoKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA1IC8vICJ0YWtlciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi50YWtlciBleGlzdHMKICAgIGdsb2JhbCBaZXJvQWRkcmVzcwogICAgIT0KICAgIGJ6IGFjY2VwdF9vZmZlcl9hZnRlcl9pZl9lbHNlQDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vdGMvY29udHJhY3QucHk6NDIKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyID09IHNlbGYudGFrZXIsICJPbmx5IGFzc2lnbmVkIHRha2VyIGNhbiBhY2NlcHQiCiAgICB0eG4gU2VuZGVyCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNSAvLyAidGFrZXIiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudGFrZXIgZXhpc3RzCiAgICA9PQogICAgYXNzZXJ0IC8vIE9ubHkgYXNzaWduZWQgdGFrZXIgY2FuIGFjY2VwdAoKYWNjZXB0X29mZmVyX2FmdGVyX2lmX2Vsc2VAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vdGMvY29udHJhY3QucHk6NDMKICAgIC8vIGFzc2VydCBUeG4uc2VuZGVyICE9IHNlbGYubWFrZXIsICJNYWtlciBjYW5ub3QgYWNjZXB0IG93biBvZmZlciIKICAgIHR4biBTZW5kZXIKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18xIC8vICJtYWtlciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5tYWtlciBleGlzdHMKICAgIHN3YXAKICAgIGRpZyAxCiAgICAhPQogICAgYXNzZXJ0IC8vIE1ha2VyIGNhbm5vdCBhY2NlcHQgb3duIG9mZmVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3RjL2NvbnRyYWN0LnB5OjQ1LTQ2CiAgICAvLyAjIENoZWNrIHRha2VyIHRyYW5zZmVyCiAgICAvLyBhc3NlcnQgdGFrZXJfdHJhbnNmZXIuYXNzZXRfcmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywgIk11c3Qgc2VuZCB0byBhcHAiCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIEFzc2V0UmVjZWl2ZXIKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0IC8vIE11c3Qgc2VuZCB0byBhcHAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vdGMvY29udHJhY3QucHk6NDcKICAgIC8vIGFzc2VydCB0YWtlcl90cmFuc2Zlci54ZmVyX2Fzc2V0ID09IHNlbGYuYXNzZXRfYiwgIldyb25nIGFzc2V0IHNlbnQiCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIFhmZXJBc3NldAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDYgLy8gImFzc2V0X2IiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYXNzZXRfYiBleGlzdHMKICAgIHN3YXAKICAgIGRpZyAxCiAgICA9PQogICAgYXNzZXJ0IC8vIFdyb25nIGFzc2V0IHNlbnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vdGMvY29udHJhY3QucHk6NDgKICAgIC8vIGFzc2VydCB0YWtlcl90cmFuc2Zlci5hc3NldF9hbW91bnQgPT0gc2VsZi5hc3NldF9iX2Ftb3VudCwgIldyb25nIGFtb3VudCBzZW50IgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBBc3NldEFtb3VudAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDcgLy8gImFzc2V0X2JfYW1vdW50IgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFzc2V0X2JfYW1vdW50IGV4aXN0cwogICAgc3dhcAogICAgZGlnIDEKICAgID09CiAgICBhc3NlcnQgLy8gV3JvbmcgYW1vdW50IHNlbnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vdGMvY29udHJhY3QucHk6NTAtNTYKICAgIC8vICMgU2VuZCBBc3NldCBBIHRvIHRha2VyCiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoCiAgICAvLyAgICAgeGZlcl9hc3NldD1zZWxmLmFzc2V0X2EsCiAgICAvLyAgICAgYXNzZXRfcmVjZWl2ZXI9VHhuLnNlbmRlciwKICAgIC8vICAgICBhc3NldF9hbW91bnQ9c2VsZi5hc3NldF9hX2Ftb3VudCwKICAgIC8vICAgICBmZWU9MV8wMDAsCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3RjL2NvbnRyYWN0LnB5OjUyCiAgICAvLyB4ZmVyX2Fzc2V0PXNlbGYuYXNzZXRfYSwKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18yIC8vICJhc3NldF9hIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFzc2V0X2EgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3RjL2NvbnRyYWN0LnB5OjUzCiAgICAvLyBhc3NldF9yZWNlaXZlcj1UeG4uc2VuZGVyLAogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL290Yy9jb250cmFjdC5weTo1NAogICAgLy8gYXNzZXRfYW1vdW50PXNlbGYuYXNzZXRfYV9hbW91bnQsCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMyAvLyAiYXNzZXRfYV9hbW91bnQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYXNzZXRfYV9hbW91bnQgZXhpc3RzCiAgICBpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CiAgICBpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKICAgIGl0eG5fZmllbGQgWGZlckFzc2V0CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3RjL2NvbnRyYWN0LnB5OjUwLTUxCiAgICAvLyAjIFNlbmQgQXNzZXQgQSB0byB0YWtlcgogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgaW50Y18yIC8vIGF4ZmVyCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3RjL2NvbnRyYWN0LnB5OjU1CiAgICAvLyBmZWU9MV8wMDAsCiAgICBpbnRjXzMgLy8gMTAwMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vdGMvY29udHJhY3QucHk6NTAtNTYKICAgIC8vICMgU2VuZCBBc3NldCBBIHRvIHRha2VyCiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoCiAgICAvLyAgICAgeGZlcl9hc3NldD1zZWxmLmFzc2V0X2EsCiAgICAvLyAgICAgYXNzZXRfcmVjZWl2ZXI9VHhuLnNlbmRlciwKICAgIC8vICAgICBhc3NldF9hbW91bnQ9c2VsZi5hc3NldF9hX2Ftb3VudCwKICAgIC8vICAgICBmZWU9MV8wMDAsCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgLy8gc21hcnRfY29udHJhY3RzL290Yy9jb250cmFjdC5weTo1OC02NAogICAgLy8gIyBTZW5kIEFzc2V0IEIgdG8gbWFrZXIKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIC8vICAgICB4ZmVyX2Fzc2V0PXNlbGYuYXNzZXRfYiwKICAgIC8vICAgICBhc3NldF9yZWNlaXZlcj1zZWxmLm1ha2VyLAogICAgLy8gICAgIGFzc2V0X2Ftb3VudD1zZWxmLmFzc2V0X2JfYW1vdW50LAogICAgLy8gICAgIGZlZT0xXzAwMCwKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIGl0eG5fZmllbGQgQXNzZXRBbW91bnQKICAgIGl0eG5fZmllbGQgWGZlckFzc2V0CiAgICBpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vdGMvY29udHJhY3QucHk6NTgtNTkKICAgIC8vICMgU2VuZCBBc3NldCBCIHRvIG1ha2VyCiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoCiAgICBpbnRjXzIgLy8gYXhmZXIKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vdGMvY29udHJhY3QucHk6NjMKICAgIC8vIGZlZT0xXzAwMCwKICAgIGludGNfMyAvLyAxMDAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gc21hcnRfY29udHJhY3RzL290Yy9jb250cmFjdC5weTo1OC02NAogICAgLy8gIyBTZW5kIEFzc2V0IEIgdG8gbWFrZXIKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIC8vICAgICB4ZmVyX2Fzc2V0PXNlbGYuYXNzZXRfYiwKICAgIC8vICAgICBhc3NldF9yZWNlaXZlcj1zZWxmLm1ha2VyLAogICAgLy8gICAgIGFzc2V0X2Ftb3VudD1zZWxmLmFzc2V0X2JfYW1vdW50LAogICAgLy8gICAgIGZlZT0xXzAwMCwKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3RjL2NvbnRyYWN0LnB5OjY2CiAgICAvLyBzZWxmLmlzX2NvbXBsZXRlZCA9IFRydWUKICAgIGJ5dGVjXzAgLy8gImlzX2NvbXBsZXRlZCIKICAgIGludGNfMSAvLyAxCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLm90Yy5jb250cmFjdC5PVENTd2FwLnJlY2xhaW1fYXNzZXRzKCkgLT4gdm9pZDoKcmVjbGFpbV9hc3NldHM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3RjL2NvbnRyYWN0LnB5OjcxCiAgICAvLyBhc3NlcnQgbm90IHNlbGYuaXNfY29tcGxldGVkLCAiU3dhcCBhbHJlYWR5IGNvbXBsZXRlZCIKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJpc19jb21wbGV0ZWQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuaXNfY29tcGxldGVkIGV4aXN0cwogICAgIQogICAgYXNzZXJ0IC8vIFN3YXAgYWxyZWFkeSBjb21wbGV0ZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vdGMvY29udHJhY3QucHk6NzIKICAgIC8vIGFzc2VydCBHbG9iYWwucm91bmQgPj0gc2VsZi5vZmZlcl9leHBpcnksICJPZmZlciBub3QgZXhwaXJlZCIKICAgIGdsb2JhbCBSb3VuZAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDQgLy8gIm9mZmVyX2V4cGlyeSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5vZmZlcl9leHBpcnkgZXhpc3RzCiAgICA+PQogICAgYXNzZXJ0IC8vIE9mZmVyIG5vdCBleHBpcmVkCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3RjL2NvbnRyYWN0LnB5OjczCiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBzZWxmLm1ha2VyLCAiT25seSBtYWtlciBjYW4gcmVjbGFpbSIKICAgIHR4biBTZW5kZXIKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18xIC8vICJtYWtlciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5tYWtlciBleGlzdHMKICAgIHN3YXAKICAgIGRpZyAxCiAgICA9PQogICAgYXNzZXJ0IC8vIE9ubHkgbWFrZXIgY2FuIHJlY2xhaW0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vdGMvY29udHJhY3QucHk6NzUtODEKICAgIC8vICMgUmVmdW5kIEFzc2V0IEEgdG8gbWFrZXIKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIC8vICAgICB4ZmVyX2Fzc2V0PXNlbGYuYXNzZXRfYSwKICAgIC8vICAgICBhc3NldF9yZWNlaXZlcj1zZWxmLm1ha2VyLAogICAgLy8gICAgIGFzc2V0X2Ftb3VudD1zZWxmLmFzc2V0X2FfYW1vdW50LAogICAgLy8gICAgIGZlZT0xXzAwMCwKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fYmVnaW4KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vdGMvY29udHJhY3QucHk6NzcKICAgIC8vIHhmZXJfYXNzZXQ9c2VsZi5hc3NldF9hLAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzIgLy8gImFzc2V0X2EiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuYXNzZXRfYSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vdGMvY29udHJhY3QucHk6NzkKICAgIC8vIGFzc2V0X2Ftb3VudD1zZWxmLmFzc2V0X2FfYW1vdW50LAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzMgLy8gImFzc2V0X2FfYW1vdW50IgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmFzc2V0X2FfYW1vdW50IGV4aXN0cwogICAgaXR4bl9maWVsZCBBc3NldEFtb3VudAogICAgaXR4bl9maWVsZCBYZmVyQXNzZXQKICAgIGl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgogICAgLy8gc21hcnRfY29udHJhY3RzL290Yy9jb250cmFjdC5weTo3NS03NgogICAgLy8gIyBSZWZ1bmQgQXNzZXQgQSB0byBtYWtlcgogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgaW50Y18yIC8vIGF4ZmVyCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3RjL2NvbnRyYWN0LnB5OjgwCiAgICAvLyBmZWU9MV8wMDAsCiAgICBpbnRjXzMgLy8gMTAwMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vdGMvY29udHJhY3QucHk6NzUtODEKICAgIC8vICMgUmVmdW5kIEFzc2V0IEEgdG8gbWFrZXIKICAgIC8vIGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIC8vICAgICB4ZmVyX2Fzc2V0PXNlbGYuYXNzZXRfYSwKICAgIC8vICAgICBhc3NldF9yZWNlaXZlcj1zZWxmLm1ha2VyLAogICAgLy8gICAgIGFzc2V0X2Ftb3VudD1zZWxmLmFzc2V0X2FfYW1vdW50LAogICAgLy8gICAgIGZlZT0xXzAwMCwKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3RjL2NvbnRyYWN0LnB5OjgzCiAgICAvLyBzZWxmLmlzX2NvbXBsZXRlZCA9IFRydWUKICAgIGJ5dGVjXzAgLy8gImlzX2NvbXBsZXRlZCIKICAgIGludGNfMSAvLyAxCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLm90Yy5jb250cmFjdC5PVENTd2FwLmRlbGV0ZV9hcHBsaWNhdGlvbigpIC0+IHZvaWQ6CmRlbGV0ZV9hcHBsaWNhdGlvbjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vdGMvY29udHJhY3QucHk6ODgKICAgIC8vIGFzc2VydCBzZWxmLmlzX2NvbXBsZXRlZCwgIlN3YXAgbXVzdCBiZSBjb21wbGV0ZWQgb3IgZXhwaXJlZCIKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJpc19jb21wbGV0ZWQiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuaXNfY29tcGxldGVkIGV4aXN0cwogICAgYXNzZXJ0IC8vIFN3YXAgbXVzdCBiZSBjb21wbGV0ZWQgb3IgZXhwaXJlZAogICAgLy8gc21hcnRfY29udHJhY3RzL290Yy9jb250cmFjdC5weTo4OQogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gc2VsZi5tYWtlciwgIk9ubHkgbWFrZXIgY2FuIGRlbGV0ZSIKICAgIHR4biBTZW5kZXIKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18xIC8vICJtYWtlciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5tYWtlciBleGlzdHMKICAgID09CiAgICBhc3NlcnQgLy8gT25seSBtYWtlciBjYW4gZGVsZXRlCiAgICByZXRzdWIK","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiAEAAEE6AcmCAxpc19jb21wbGV0ZWQFbWFrZXIHYXNzZXRfYQ5hc3NldF9hX2Ftb3VudAxvZmZlcl9leHBpcnkFdGFrZXIHYXNzZXRfYg5hc3NldF9iX2Ftb3VudDEbQQAjggQEbeoHlAR3LlvMBE8X0jgEM7NJnjYaAI4EADIAHAAQAAIiQzEZgQUSRDEYRIgBLSNDMRkURDEYRIgA7SNDMRkURDEYRDEWIwlJOBAkEkSIAFgjQzEZFEQxGBRENhoBF8AwNhoCFzYaAxfAMDYaBBc2GgUXNhoGF8AciAACI0OKBgApMQBnKov6ZyuL+2cnBov8ZycHi/1nMgaL/ggnBExnJwWL/2coImeJigEAIihlRBREMgYiJwRlRAxEIicFZUQyAxNBAAkxACInBWVEEkQxACIpZURMSwETRIv/OBQyChJEi/84ESInBmVETEsBEkSL/zgSIicHZURMSwESRLEiKmVEMQAiK2VEshKyFLIRJLIQJbIBs7GyErIRshQkshAlsgGzKCNniSIoZUQURDIGIicEZUQPRDEAIillRExLARJEsSIqZUQiK2VEshKyEbIUJLIQJbIBsygjZ4kiKGVERDEAIillRBJEiQ==","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":10,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the OtcSwap contract
 */
export type OtcSwapArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create_application(asset,uint64,asset,uint64,uint64,account)void': {
      assetA: bigint
      assetAAmount: bigint | number
      assetB: bigint
      assetBAmount: bigint | number
      expiryRounds: bigint | number
      taker: Uint8Array | string
    }
    'accept_offer(axfer)void': {
      takerTransfer: AppMethodCallTransactionArgument
    }
    'reclaim_assets()void': Record<string, never>
    'delete_application()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create_application(asset,uint64,asset,uint64,uint64,account)void': [assetA: bigint, assetAAmount: bigint | number, assetB: bigint, assetBAmount: bigint | number, expiryRounds: bigint | number, taker: Uint8Array | string]
    'accept_offer(axfer)void': [takerTransfer: AppMethodCallTransactionArgument]
    'reclaim_assets()void': []
    'delete_application()void': []
  }
}

/**
 * The return type for each method
 */
export type OtcSwapReturns = {
  'create_application(asset,uint64,asset,uint64,uint64,account)void': void
  'accept_offer(axfer)void': void
  'reclaim_assets()void': void
  'delete_application()void': void
}

/**
 * Defines the types of available calls and state of the OtcSwap smart contract.
 */
export type OtcSwapTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create_application(asset,uint64,asset,uint64,uint64,account)void' | 'create_application', {
      argsObj: OtcSwapArgs['obj']['create_application(asset,uint64,asset,uint64,uint64,account)void']
      argsTuple: OtcSwapArgs['tuple']['create_application(asset,uint64,asset,uint64,uint64,account)void']
      returns: OtcSwapReturns['create_application(asset,uint64,asset,uint64,uint64,account)void']
    }>
    & Record<'accept_offer(axfer)void' | 'accept_offer', {
      argsObj: OtcSwapArgs['obj']['accept_offer(axfer)void']
      argsTuple: OtcSwapArgs['tuple']['accept_offer(axfer)void']
      returns: OtcSwapReturns['accept_offer(axfer)void']
    }>
    & Record<'reclaim_assets()void' | 'reclaim_assets', {
      argsObj: OtcSwapArgs['obj']['reclaim_assets()void']
      argsTuple: OtcSwapArgs['tuple']['reclaim_assets()void']
      returns: OtcSwapReturns['reclaim_assets()void']
    }>
    & Record<'delete_application()void' | 'delete_application', {
      argsObj: OtcSwapArgs['obj']['delete_application()void']
      argsTuple: OtcSwapArgs['tuple']['delete_application()void']
      returns: OtcSwapReturns['delete_application()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        maker: string
        taker: string
        assetA: bigint
        assetAAmount: bigint
        assetB: bigint
        assetBAmount: bigint
        offerExpiry: bigint
        isCompleted: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type OtcSwapSignatures = keyof OtcSwapTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type OtcSwapNonVoidMethodSignatures = keyof OtcSwapTypes['methods'] extends infer T ? T extends keyof OtcSwapTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the OtcSwap smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends OtcSwapSignatures> = OtcSwapTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the OtcSwap smart contract to the method's return type
 */
export type MethodReturn<TSignature extends OtcSwapSignatures> = OtcSwapTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = OtcSwapTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type OtcSwapCreateCallParams =
  | Expand<CallParams<OtcSwapArgs['obj']['create_application(asset,uint64,asset,uint64,uint64,account)void'] | OtcSwapArgs['tuple']['create_application(asset,uint64,asset,uint64,uint64,account)void']> & {method: 'create_application'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<OtcSwapArgs['obj']['create_application(asset,uint64,asset,uint64,uint64,account)void'] | OtcSwapArgs['tuple']['create_application(asset,uint64,asset,uint64,uint64,account)void']> & {method: 'create_application(asset,uint64,asset,uint64,uint64,account)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported delete method params for this smart contract
 */
export type OtcSwapDeleteCallParams =
  | Expand<CallParams<OtcSwapArgs['obj']['delete_application()void'] | OtcSwapArgs['tuple']['delete_application()void']> & {method: 'delete_application'}>
  | Expand<CallParams<OtcSwapArgs['obj']['delete_application()void'] | OtcSwapArgs['tuple']['delete_application()void']> & {method: 'delete_application()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type OtcSwapDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: OtcSwapCreateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: OtcSwapDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the OtcSwap smart contract
 */
export abstract class OtcSwapParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends OtcSwapCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'create_application':
          case 'create_application(asset,uint64,asset,uint64,uint64,account)void':
            return OtcSwapParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the OTCSwap smart contract using the create_application(asset,uint64,asset,uint64,uint64,account)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<OtcSwapArgs['obj']['create_application(asset,uint64,asset,uint64,uint64,account)void'] | OtcSwapArgs['tuple']['create_application(asset,uint64,asset,uint64,uint64,account)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'create_application(asset,uint64,asset,uint64,uint64,account)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.assetA, params.args.assetAAmount, params.args.assetB, params.args.assetBAmount, params.args.expiryRounds, params.args.taker],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends OtcSwapDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'delete_application':
          case 'delete_application()void':
            return OtcSwapParamsFactory.delete.deleteApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the OTCSwap smart contract using the delete_application()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      deleteApplication(params: CallParams<OtcSwapArgs['obj']['delete_application()void'] | OtcSwapArgs['tuple']['delete_application()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'delete_application()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the accept_offer(axfer)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static acceptOffer(params: CallParams<OtcSwapArgs['obj']['accept_offer(axfer)void'] | OtcSwapArgs['tuple']['accept_offer(axfer)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'accept_offer(axfer)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.takerTransfer],
    }
  }
  /**
   * Constructs a no op call for the reclaim_assets()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static reclaimAssets(params: CallParams<OtcSwapArgs['obj']['reclaim_assets()void'] | OtcSwapArgs['tuple']['reclaim_assets()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'reclaim_assets()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the OTCSwap smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class OtcSwapFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `OtcSwapFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new OtcSwapClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new OtcSwapClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the OTCSwap smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: OtcSwapDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? OtcSwapParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (OtcSwapCreateCallParams & { args: Uint8Array[] }) : undefined,
      deleteParams: params.deleteParams?.method ? OtcSwapParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams ? params.deleteParams as (OtcSwapDeleteCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new OtcSwapClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the OTCSwap smart contract using the create_application(asset,uint64,asset,uint64,uint64,account)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<OtcSwapArgs['obj']['create_application(asset,uint64,asset,uint64,uint64,account)void'] | OtcSwapArgs['tuple']['create_application(asset,uint64,asset,uint64,uint64,account)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(OtcSwapParamsFactory.create.createApplication(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the OTCSwap smart contract using the delete_application()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      deleteApplication: (params: CallParams<OtcSwapArgs['obj']['delete_application()void'] | OtcSwapArgs['tuple']['delete_application()void']> = {args: []}) => {
        return this.appFactory.params.deployDelete(OtcSwapParamsFactory.delete.deleteApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the OTCSwap smart contract using the create_application(asset,uint64,asset,uint64,uint64,account)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<OtcSwapArgs['obj']['create_application(asset,uint64,asset,uint64,uint64,account)void'] | OtcSwapArgs['tuple']['create_application(asset,uint64,asset,uint64,uint64,account)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(OtcSwapParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the OTCSwap smart contract using an ABI method call using the create_application(asset,uint64,asset,uint64,uint64,account)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<OtcSwapArgs['obj']['create_application(asset,uint64,asset,uint64,uint64,account)void'] | OtcSwapArgs['tuple']['create_application(asset,uint64,asset,uint64,uint64,account)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(OtcSwapParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | OtcSwapReturns['create_application(asset,uint64,asset,uint64,uint64,account)void']) }, appClient: new OtcSwapClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the OTCSwap smart contract
 */
export class OtcSwapClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `OtcSwapClient`
   *
   * @param appClient An `AppClient` instance which has been created with the OtcSwap app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `OtcSwapClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends OtcSwapNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `OtcSwapClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<OtcSwapClient> {
    return new OtcSwapClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `OtcSwapClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<OtcSwapClient> {
    return new OtcSwapClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the OTCSwap smart contract using the `delete_application()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      deleteApplication: (params: CallParams<OtcSwapArgs['obj']['delete_application()void'] | OtcSwapArgs['tuple']['delete_application()void']> = {args: []}) => {
        return this.appClient.params.delete(OtcSwapParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the OTCSwap smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the OTCSwap smart contract using the `accept_offer(axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    acceptOffer: (params: CallParams<OtcSwapArgs['obj']['accept_offer(axfer)void'] | OtcSwapArgs['tuple']['accept_offer(axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OtcSwapParamsFactory.acceptOffer(params))
    },

    /**
     * Makes a call to the OTCSwap smart contract using the `reclaim_assets()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    reclaimAssets: (params: CallParams<OtcSwapArgs['obj']['reclaim_assets()void'] | OtcSwapArgs['tuple']['reclaim_assets()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(OtcSwapParamsFactory.reclaimAssets(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the OTCSwap smart contract using the `delete_application()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      deleteApplication: (params: CallParams<OtcSwapArgs['obj']['delete_application()void'] | OtcSwapArgs['tuple']['delete_application()void']> = {args: []}) => {
        return this.appClient.createTransaction.delete(OtcSwapParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the OTCSwap smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the OTCSwap smart contract using the `accept_offer(axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    acceptOffer: (params: CallParams<OtcSwapArgs['obj']['accept_offer(axfer)void'] | OtcSwapArgs['tuple']['accept_offer(axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OtcSwapParamsFactory.acceptOffer(params))
    },

    /**
     * Makes a call to the OTCSwap smart contract using the `reclaim_assets()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    reclaimAssets: (params: CallParams<OtcSwapArgs['obj']['reclaim_assets()void'] | OtcSwapArgs['tuple']['reclaim_assets()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(OtcSwapParamsFactory.reclaimAssets(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the OTCSwap smart contract using the `delete_application()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      deleteApplication: async (params: CallParams<OtcSwapArgs['obj']['delete_application()void'] | OtcSwapArgs['tuple']['delete_application()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.delete(OtcSwapParamsFactory.delete.deleteApplication(params))
        return {...result, return: result.return as unknown as (undefined | OtcSwapReturns['delete_application()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the OTCSwap smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the OTCSwap smart contract using the `accept_offer(axfer)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    acceptOffer: async (params: CallParams<OtcSwapArgs['obj']['accept_offer(axfer)void'] | OtcSwapArgs['tuple']['accept_offer(axfer)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OtcSwapParamsFactory.acceptOffer(params))
      return {...result, return: result.return as unknown as (undefined | OtcSwapReturns['accept_offer(axfer)void'])}
    },

    /**
     * Makes a call to the OTCSwap smart contract using the `reclaim_assets()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    reclaimAssets: async (params: CallParams<OtcSwapArgs['obj']['reclaim_assets()void'] | OtcSwapArgs['tuple']['reclaim_assets()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(OtcSwapParamsFactory.reclaimAssets(params))
      return {...result, return: result.return as unknown as (undefined | OtcSwapReturns['reclaim_assets()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new OtcSwapClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current OTCSwap app
   */
  state = {
    /**
     * Methods to access global state for the current OTCSwap app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          maker: result.maker,
          taker: result.taker,
          assetA: result.asset_a,
          assetAAmount: result.asset_a_amount,
          assetB: result.asset_b,
          assetBAmount: result.asset_b_amount,
          offerExpiry: result.offer_expiry,
          isCompleted: result.is_completed,
        }
      },
      /**
       * Get the current value of the maker key in global state
       */
      maker: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("maker")) as string | undefined },
      /**
       * Get the current value of the taker key in global state
       */
      taker: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("taker")) as string | undefined },
      /**
       * Get the current value of the asset_a key in global state
       */
      assetA: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("asset_a")) as bigint | undefined },
      /**
       * Get the current value of the asset_a_amount key in global state
       */
      assetAAmount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("asset_a_amount")) as bigint | undefined },
      /**
       * Get the current value of the asset_b key in global state
       */
      assetB: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("asset_b")) as bigint | undefined },
      /**
       * Get the current value of the asset_b_amount key in global state
       */
      assetBAmount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("asset_b_amount")) as bigint | undefined },
      /**
       * Get the current value of the offer_expiry key in global state
       */
      offerExpiry: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("offer_expiry")) as bigint | undefined },
      /**
       * Get the current value of the is_completed key in global state
       */
      isCompleted: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("is_completed")) as bigint | undefined },
    },
  }

  public newGroup(): OtcSwapComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a accept_offer(axfer)void method call against the OTCSwap contract
       */
      acceptOffer(params: CallParams<OtcSwapArgs['obj']['accept_offer(axfer)void'] | OtcSwapArgs['tuple']['accept_offer(axfer)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.acceptOffer(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a reclaim_assets()void method call against the OTCSwap contract
       */
      reclaimAssets(params: CallParams<OtcSwapArgs['obj']['reclaim_assets()void'] | OtcSwapArgs['tuple']['reclaim_assets()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.reclaimAssets(params)))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        return {
          deleteApplication: (params: CallParams<OtcSwapArgs['obj']['delete_application()void'] | OtcSwapArgs['tuple']['delete_application()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.deleteApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the OTCSwap contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as OtcSwapComposer
  }
}
export type OtcSwapComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the accept_offer(axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  acceptOffer(params?: CallParams<OtcSwapArgs['obj']['accept_offer(axfer)void'] | OtcSwapArgs['tuple']['accept_offer(axfer)void']>): OtcSwapComposer<[...TReturns, OtcSwapReturns['accept_offer(axfer)void'] | undefined]>

  /**
   * Calls the reclaim_assets()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  reclaimAssets(params?: CallParams<OtcSwapArgs['obj']['reclaim_assets()void'] | OtcSwapArgs['tuple']['reclaim_assets()void']>): OtcSwapComposer<[...TReturns, OtcSwapReturns['reclaim_assets()void'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the OTCSwap smart contract using the delete_application()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(params?: CallParams<OtcSwapArgs['obj']['delete_application()void'] | OtcSwapArgs['tuple']['delete_application()void']>): OtcSwapComposer<[...TReturns, OtcSwapReturns['delete_application()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the OTCSwap smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): OtcSwapComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): OtcSwapComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<OtcSwapComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<OtcSwapComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<OtcSwapComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<OtcSwapComposerResults<TReturns>>
}
export type OtcSwapComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

