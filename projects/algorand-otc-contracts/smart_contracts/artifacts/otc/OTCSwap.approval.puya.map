{
  "version": 3,
  "sources": [
    "../../otc/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;AAAA;;AAiFK;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAhCA;;AAAA;AAAA;AAAA;;AAAA;AAhCL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAgCK;;;AAAA;;AApBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAZL;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;AAYK;;;AAAA;;AAAL;;;AAUQ;AAAa;;AAAb;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;;AAAA;;AAAA;AACA;;AAAA;;AAAA;AACoB;;AAAA;;AAAA;AAApB;;AAAA;AAAA;AACA;;AAAA;;AAAA;AACA;AAAoB;AAApB;;AAGR;;;AAEmB;AAAA;AAAA;AAAA;AAAJ;AAAP;AACO;;AAAe;AAAA;;AAAA;AAAA;AAAf;AAAP;AACG;AAAA;;AAAA;AAAA;AAAc;;AAAd;AAAX;;;AACmB;;AAAc;AAAA;;AAAA;AAAA;AAAd;AAAP;AACG;;AAAc;AAAA;AAAA;AAAA;AAAd;AAAA;;AAAA;AAAP;AAGO;;AAAA;;AAAiC;;AAAjC;AAAP;AACO;;AAAA;;AAA6B;AAAA;;AAAA;AAAA;AAA7B;AAAA;;AAAA;AAAP;AACO;;AAAA;;AAA+B;AAAA;;AAAA;AAAA;AAA/B;AAAA;;AAAA;AAAP;AAGA;AACe;AAAA;AAAA;AAAA;AACI;;AACF;AAAA;AAAA;AAAA;;;;;;;AAHjB;;;AAIQ;;;AAJR;AAQA;;;;;;;AAAA;;;AAIQ;;;AAJR;AAOA;AAAoB;AAApB;;AAKW;AAAA;AAAA;AAAA;AAAJ;AAAP;AACO;;AAAgB;AAAA;;AAAA;AAAA;AAAhB;AAAP;AACO;;AAAc;AAAA;AAAA;AAAA;AAAd;AAAA;;AAAA;AAAP;AAGA;AACe;AAAA;AAAA;AAAA;AAEE;AAAA;AAAA;AAAA;;;;;;;AAHjB;;;AAIQ;;;AAJR;AAOA;AAAoB;AAApB;;AAKO;AAAA;AAAA;AAAA;AAAP;AACO;;AAAc;AAAA;AAAA;AAAA;AAAd;AAAP;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 4 1000"
    },
    "8": {
      "op": "bytecblock \"is_completed\" \"maker\" \"asset_a\" \"asset_a_amount\" \"offer_expiry\" \"taker\" \"asset_b\" \"asset_b_amount\""
    },
    "94": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "96": {
      "op": "bz main_after_if_else@10",
      "stack_out": []
    },
    "99": {
      "op": "pushbytess 0x6dea0794 0x772e5bcc 0x4f17d238 0x33b3499e // method \"create_application(asset,uint64,asset,uint64,uint64,account)void\", method \"accept_offer(axfer)void\", method \"reclaim_assets()void\", method \"delete_application()void\"",
      "defined_out": [
        "Method(accept_offer(axfer)void)",
        "Method(create_application(asset,uint64,asset,uint64,uint64,account)void)",
        "Method(delete_application()void)",
        "Method(reclaim_assets()void)"
      ],
      "stack_out": [
        "Method(create_application(asset,uint64,asset,uint64,uint64,account)void)",
        "Method(accept_offer(axfer)void)",
        "Method(reclaim_assets()void)",
        "Method(delete_application()void)"
      ]
    },
    "121": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(accept_offer(axfer)void)",
        "Method(create_application(asset,uint64,asset,uint64,uint64,account)void)",
        "Method(delete_application()void)",
        "Method(reclaim_assets()void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create_application(asset,uint64,asset,uint64,uint64,account)void)",
        "Method(accept_offer(axfer)void)",
        "Method(reclaim_assets()void)",
        "Method(delete_application()void)",
        "tmp%2#0"
      ]
    },
    "124": {
      "op": "match main_create_application_route@3 main_accept_offer_route@4 main_reclaim_assets_route@5 main_delete_application_route@6",
      "stack_out": []
    },
    "134": {
      "block": "main_after_if_else@10",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "135": {
      "op": "return",
      "stack_out": []
    },
    "136": {
      "block": "main_delete_application_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "138": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0",
        "DeleteApplication"
      ]
    },
    "140": {
      "op": "==",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "141": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": []
    },
    "142": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "144": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "145": {
      "callsub": "smart_contracts.otc.contract.OTCSwap.delete_application",
      "op": "callsub delete_application"
    },
    "148": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "149": {
      "op": "return",
      "stack_out": []
    },
    "150": {
      "block": "main_reclaim_assets_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "152": {
      "op": "!",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "153": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "154": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "156": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "157": {
      "callsub": "smart_contracts.otc.contract.OTCSwap.reclaim_assets",
      "op": "callsub reclaim_assets"
    },
    "160": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "161": {
      "op": "return",
      "stack_out": []
    },
    "162": {
      "block": "main_accept_offer_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "164": {
      "op": "!",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "165": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "166": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "168": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "169": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "171": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0",
        "1"
      ]
    },
    "172": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "173": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "174": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "176": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "axfer"
      ]
    },
    "177": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "178": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "179": {
      "callsub": "smart_contracts.otc.contract.OTCSwap.accept_offer",
      "op": "callsub accept_offer",
      "stack_out": []
    },
    "182": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "183": {
      "op": "return",
      "stack_out": []
    },
    "184": {
      "block": "main_create_application_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "186": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "187": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "188": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "190": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "191": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "192": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "195": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "196": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "198": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "201": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "202": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[1]%1#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "205": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "206": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%11#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "208": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%11#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%11#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "211": {
      "op": "btoi",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "212": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%12#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "215": {
      "op": "btoi",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "216": {
      "op": "txna ApplicationArgs 6",
      "defined_out": [
        "reinterpret_bytes[1]%2#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "219": {
      "op": "btoi",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "220": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%15#0"
      ]
    },
    "222": {
      "callsub": "smart_contracts.otc.contract.OTCSwap.create_application",
      "op": "callsub create_application",
      "stack_out": []
    },
    "225": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "226": {
      "op": "return",
      "stack_out": []
    },
    "227": {
      "subroutine": "smart_contracts.otc.contract.OTCSwap.create_application",
      "params": {
        "asset_a#0": "uint64",
        "asset_a_amount#0": "uint64",
        "asset_b#0": "uint64",
        "asset_b_amount#0": "uint64",
        "expiry_rounds#0": "uint64",
        "taker#0": "bytes"
      },
      "block": "create_application",
      "stack_in": [],
      "op": "proto 6 0"
    },
    "230": {
      "op": "bytec_1 // \"maker\"",
      "defined_out": [
        "\"maker\""
      ],
      "stack_out": [
        "\"maker\""
      ]
    },
    "231": {
      "op": "txn Sender",
      "defined_out": [
        "\"maker\"",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "\"maker\"",
        "materialized_values%0#0"
      ]
    },
    "233": {
      "op": "app_global_put",
      "stack_out": []
    },
    "234": {
      "op": "bytec_2 // \"asset_a\"",
      "defined_out": [
        "\"asset_a\""
      ],
      "stack_out": [
        "\"asset_a\""
      ]
    },
    "235": {
      "op": "frame_dig -6",
      "defined_out": [
        "\"asset_a\"",
        "asset_a#0 (copy)"
      ],
      "stack_out": [
        "\"asset_a\"",
        "asset_a#0 (copy)"
      ]
    },
    "237": {
      "op": "app_global_put",
      "stack_out": []
    },
    "238": {
      "op": "bytec_3 // \"asset_a_amount\"",
      "defined_out": [
        "\"asset_a_amount\""
      ],
      "stack_out": [
        "\"asset_a_amount\""
      ]
    },
    "239": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"asset_a_amount\"",
        "asset_a_amount#0 (copy)"
      ],
      "stack_out": [
        "\"asset_a_amount\"",
        "asset_a_amount#0 (copy)"
      ]
    },
    "241": {
      "op": "app_global_put",
      "stack_out": []
    },
    "242": {
      "op": "bytec 6 // \"asset_b\"",
      "defined_out": [
        "\"asset_b\""
      ],
      "stack_out": [
        "\"asset_b\""
      ]
    },
    "244": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"asset_b\"",
        "asset_b#0 (copy)"
      ],
      "stack_out": [
        "\"asset_b\"",
        "asset_b#0 (copy)"
      ]
    },
    "246": {
      "op": "app_global_put",
      "stack_out": []
    },
    "247": {
      "op": "bytec 7 // \"asset_b_amount\"",
      "defined_out": [
        "\"asset_b_amount\""
      ],
      "stack_out": [
        "\"asset_b_amount\""
      ]
    },
    "249": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"asset_b_amount\"",
        "asset_b_amount#0 (copy)"
      ],
      "stack_out": [
        "\"asset_b_amount\"",
        "asset_b_amount#0 (copy)"
      ]
    },
    "251": {
      "op": "app_global_put",
      "stack_out": []
    },
    "252": {
      "op": "global Round",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "254": {
      "op": "frame_dig -2",
      "defined_out": [
        "expiry_rounds#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "expiry_rounds#0 (copy)"
      ]
    },
    "256": {
      "op": "+",
      "defined_out": [
        "materialized_values%1#0"
      ],
      "stack_out": [
        "materialized_values%1#0"
      ]
    },
    "257": {
      "op": "bytec 4 // \"offer_expiry\"",
      "defined_out": [
        "\"offer_expiry\"",
        "materialized_values%1#0"
      ],
      "stack_out": [
        "materialized_values%1#0",
        "\"offer_expiry\""
      ]
    },
    "259": {
      "op": "swap",
      "stack_out": [
        "\"offer_expiry\"",
        "materialized_values%1#0"
      ]
    },
    "260": {
      "op": "app_global_put",
      "stack_out": []
    },
    "261": {
      "op": "bytec 5 // \"taker\"",
      "defined_out": [
        "\"taker\""
      ],
      "stack_out": [
        "\"taker\""
      ]
    },
    "263": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"taker\"",
        "taker#0 (copy)"
      ],
      "stack_out": [
        "\"taker\"",
        "taker#0 (copy)"
      ]
    },
    "265": {
      "op": "app_global_put",
      "stack_out": []
    },
    "266": {
      "op": "bytec_0 // \"is_completed\"",
      "defined_out": [
        "\"is_completed\""
      ],
      "stack_out": [
        "\"is_completed\""
      ]
    },
    "267": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"is_completed\"",
        "0"
      ],
      "stack_out": [
        "\"is_completed\"",
        "0"
      ]
    },
    "268": {
      "op": "app_global_put",
      "stack_out": []
    },
    "269": {
      "retsub": true,
      "op": "retsub"
    },
    "270": {
      "subroutine": "smart_contracts.otc.contract.OTCSwap.accept_offer",
      "params": {
        "taker_transfer#0": "uint64"
      },
      "block": "accept_offer",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "273": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "274": {
      "op": "bytec_0 // \"is_completed\"",
      "defined_out": [
        "\"is_completed\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"is_completed\""
      ]
    },
    "275": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "276": {
      "error": "check self.is_completed exists",
      "op": "assert // check self.is_completed exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "277": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "278": {
      "error": "Swap already completed",
      "op": "assert // Swap already completed",
      "stack_out": []
    },
    "279": {
      "op": "global Round",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "281": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "282": {
      "op": "bytec 4 // \"offer_expiry\"",
      "defined_out": [
        "\"offer_expiry\"",
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0",
        "\"offer_expiry\""
      ]
    },
    "284": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "285": {
      "error": "check self.offer_expiry exists",
      "op": "assert // check self.offer_expiry exists",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "286": {
      "op": "<",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "287": {
      "error": "Offer expired",
      "op": "assert // Offer expired",
      "stack_out": []
    },
    "288": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "289": {
      "op": "bytec 5 // \"taker\"",
      "defined_out": [
        "\"taker\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"taker\""
      ]
    },
    "291": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "292": {
      "error": "check self.taker exists",
      "op": "assert // check self.taker exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "293": {
      "op": "global ZeroAddress",
      "defined_out": [
        "maybe_value%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "tmp%3#0"
      ]
    },
    "295": {
      "op": "!=",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "296": {
      "op": "bz accept_offer_after_if_else@2",
      "stack_out": []
    },
    "299": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "301": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "302": {
      "op": "bytec 5 // \"taker\"",
      "stack_out": [
        "tmp%5#0",
        "0",
        "\"taker\""
      ]
    },
    "304": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "305": {
      "error": "check self.taker exists",
      "op": "assert // check self.taker exists",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%3#0"
      ]
    },
    "306": {
      "op": "==",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "307": {
      "error": "Only assigned taker can accept",
      "op": "assert // Only assigned taker can accept",
      "stack_out": []
    },
    "308": {
      "block": "accept_offer_after_if_else@2",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "310": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0"
      ]
    },
    "311": {
      "op": "bytec_1 // \"maker\"",
      "defined_out": [
        "\"maker\"",
        "0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "0",
        "\"maker\""
      ]
    },
    "312": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "313": {
      "error": "check self.maker exists",
      "op": "assert // check self.maker exists",
      "stack_out": [
        "tmp%7#0",
        "maybe_value%4#0"
      ]
    },
    "314": {
      "op": "swap",
      "stack_out": [
        "maybe_value%4#0",
        "tmp%7#0"
      ]
    },
    "315": {
      "op": "dig 1",
      "defined_out": [
        "maybe_value%4#0",
        "maybe_value%4#0 (copy)",
        "tmp%7#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "tmp%7#0",
        "maybe_value%4#0 (copy)"
      ]
    },
    "317": {
      "op": "!=",
      "defined_out": [
        "maybe_value%4#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "tmp%8#0"
      ]
    },
    "318": {
      "error": "Maker cannot accept own offer",
      "op": "assert // Maker cannot accept own offer",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "319": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%4#0",
        "taker_transfer#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "taker_transfer#0 (copy)"
      ]
    },
    "321": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "maybe_value%4#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "tmp%9#0"
      ]
    },
    "323": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "maybe_value%4#0",
        "tmp%10#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "325": {
      "op": "==",
      "defined_out": [
        "maybe_value%4#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "tmp%11#0"
      ]
    },
    "326": {
      "error": "Must send to app",
      "op": "assert // Must send to app",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "327": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%4#0",
        "taker_transfer#0 (copy)"
      ]
    },
    "329": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "maybe_value%4#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "tmp%12#0"
      ]
    },
    "331": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%4#0",
        "tmp%12#0",
        "0"
      ]
    },
    "332": {
      "op": "bytec 6 // \"asset_b\"",
      "defined_out": [
        "\"asset_b\"",
        "0",
        "maybe_value%4#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "tmp%12#0",
        "0",
        "\"asset_b\""
      ]
    },
    "334": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "tmp%12#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "335": {
      "error": "check self.asset_b exists",
      "op": "assert // check self.asset_b exists",
      "stack_out": [
        "maybe_value%4#0",
        "tmp%12#0",
        "maybe_value%5#0"
      ]
    },
    "336": {
      "op": "swap",
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "tmp%12#0"
      ]
    },
    "337": {
      "op": "dig 1",
      "defined_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%5#0 (copy)",
        "tmp%12#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "tmp%12#0",
        "maybe_value%5#0 (copy)"
      ]
    },
    "339": {
      "op": "==",
      "defined_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "tmp%13#0"
      ]
    },
    "340": {
      "error": "Wrong asset sent",
      "op": "assert // Wrong asset sent",
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0"
      ]
    },
    "341": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "taker_transfer#0 (copy)"
      ]
    },
    "343": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "tmp%14#0"
      ]
    },
    "345": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "tmp%14#0",
        "0"
      ]
    },
    "346": {
      "op": "bytec 7 // \"asset_b_amount\"",
      "defined_out": [
        "\"asset_b_amount\"",
        "0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "tmp%14#0",
        "0",
        "\"asset_b_amount\""
      ]
    },
    "348": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "tmp%14#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "349": {
      "error": "check self.asset_b_amount exists",
      "op": "assert // check self.asset_b_amount exists",
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "tmp%14#0",
        "maybe_value%6#0"
      ]
    },
    "350": {
      "op": "swap",
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "tmp%14#0"
      ]
    },
    "351": {
      "op": "dig 1",
      "defined_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%6#0 (copy)",
        "tmp%14#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "tmp%14#0",
        "maybe_value%6#0 (copy)"
      ]
    },
    "353": {
      "op": "==",
      "defined_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "tmp%15#0"
      ]
    },
    "354": {
      "error": "Wrong amount sent",
      "op": "assert // Wrong amount sent",
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ]
    },
    "355": {
      "op": "itxn_begin"
    },
    "356": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "0"
      ]
    },
    "357": {
      "op": "bytec_2 // \"asset_a\"",
      "defined_out": [
        "\"asset_a\"",
        "0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "0",
        "\"asset_a\""
      ]
    },
    "358": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "359": {
      "error": "check self.asset_a exists",
      "op": "assert // check self.asset_a exists",
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0"
      ]
    },
    "360": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "362": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "363": {
      "op": "bytec_3 // \"asset_a_amount\"",
      "defined_out": [
        "\"asset_a_amount\"",
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0",
        "\"asset_a_amount\""
      ]
    },
    "364": {
      "op": "app_global_get_ex",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_exists%8#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "maybe_value%8#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "365": {
      "error": "check self.asset_a_amount exists",
      "op": "assert // check self.asset_a_amount exists",
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "maybe_value%8#0"
      ]
    },
    "366": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "368": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%7#0"
      ]
    },
    "370": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ]
    },
    "372": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "axfer"
      ]
    },
    "373": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ]
    },
    "375": {
      "op": "intc_3 // 1000",
      "defined_out": [
        "1000",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "1000"
      ]
    },
    "376": {
      "op": "itxn_field Fee",
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ]
    },
    "378": {
      "op": "itxn_submit"
    },
    "379": {
      "op": "itxn_begin"
    },
    "380": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0"
      ]
    },
    "382": {
      "op": "itxn_field XferAsset"
    },
    "384": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "386": {
      "op": "intc_2 // axfer",
      "stack_out": [
        "axfer"
      ]
    },
    "387": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "389": {
      "op": "intc_3 // 1000",
      "stack_out": [
        "1000"
      ]
    },
    "390": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "392": {
      "op": "itxn_submit"
    },
    "393": {
      "op": "bytec_0 // \"is_completed\"",
      "defined_out": [
        "\"is_completed\""
      ],
      "stack_out": [
        "\"is_completed\""
      ]
    },
    "394": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"is_completed\"",
        "1"
      ],
      "stack_out": [
        "\"is_completed\"",
        "1"
      ]
    },
    "395": {
      "op": "app_global_put",
      "stack_out": []
    },
    "396": {
      "retsub": true,
      "op": "retsub"
    },
    "397": {
      "subroutine": "smart_contracts.otc.contract.OTCSwap.reclaim_assets",
      "params": {},
      "block": "reclaim_assets",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "398": {
      "op": "bytec_0 // \"is_completed\"",
      "defined_out": [
        "\"is_completed\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"is_completed\""
      ]
    },
    "399": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "400": {
      "error": "check self.is_completed exists",
      "op": "assert // check self.is_completed exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "401": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "402": {
      "error": "Swap already completed",
      "op": "assert // Swap already completed",
      "stack_out": []
    },
    "403": {
      "op": "global Round",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "405": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "406": {
      "op": "bytec 4 // \"offer_expiry\"",
      "defined_out": [
        "\"offer_expiry\"",
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0",
        "\"offer_expiry\""
      ]
    },
    "408": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "409": {
      "error": "check self.offer_expiry exists",
      "op": "assert // check self.offer_expiry exists",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "410": {
      "op": ">=",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "411": {
      "error": "Offer not expired",
      "op": "assert // Offer not expired",
      "stack_out": []
    },
    "412": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "414": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%3#0",
        "0"
      ]
    },
    "415": {
      "op": "bytec_1 // \"maker\"",
      "defined_out": [
        "\"maker\"",
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0",
        "\"maker\""
      ]
    },
    "416": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "417": {
      "error": "check self.maker exists",
      "op": "assert // check self.maker exists",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%2#0"
      ]
    },
    "418": {
      "op": "swap",
      "stack_out": [
        "maybe_value%2#0",
        "tmp%3#0"
      ]
    },
    "419": {
      "op": "dig 1",
      "defined_out": [
        "maybe_value%2#0",
        "maybe_value%2#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "tmp%3#0",
        "maybe_value%2#0 (copy)"
      ]
    },
    "421": {
      "op": "==",
      "defined_out": [
        "maybe_value%2#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "tmp%4#0"
      ]
    },
    "422": {
      "error": "Only maker can reclaim",
      "op": "assert // Only maker can reclaim",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "423": {
      "op": "itxn_begin"
    },
    "424": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%2#0",
        "0"
      ]
    },
    "425": {
      "op": "bytec_2 // \"asset_a\"",
      "defined_out": [
        "\"asset_a\"",
        "0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "0",
        "\"asset_a\""
      ]
    },
    "426": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "427": {
      "error": "check self.asset_a exists",
      "op": "assert // check self.asset_a exists",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "428": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0"
      ]
    },
    "429": {
      "op": "bytec_3 // \"asset_a_amount\"",
      "defined_out": [
        "\"asset_a_amount\"",
        "0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0",
        "\"asset_a_amount\""
      ]
    },
    "430": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "431": {
      "error": "check self.asset_a_amount exists",
      "op": "assert // check self.asset_a_amount exists",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%5#0"
      ]
    },
    "432": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "434": {
      "op": "itxn_field XferAsset"
    },
    "436": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "438": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "439": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "441": {
      "op": "intc_3 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "442": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "444": {
      "op": "itxn_submit"
    },
    "445": {
      "op": "bytec_0 // \"is_completed\"",
      "stack_out": [
        "\"is_completed\""
      ]
    },
    "446": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"is_completed\"",
        "1"
      ],
      "stack_out": [
        "\"is_completed\"",
        "1"
      ]
    },
    "447": {
      "op": "app_global_put",
      "stack_out": []
    },
    "448": {
      "retsub": true,
      "op": "retsub"
    },
    "449": {
      "subroutine": "smart_contracts.otc.contract.OTCSwap.delete_application",
      "params": {},
      "block": "delete_application",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "450": {
      "op": "bytec_0 // \"is_completed\"",
      "defined_out": [
        "\"is_completed\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"is_completed\""
      ]
    },
    "451": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "452": {
      "error": "check self.is_completed exists",
      "op": "assert // check self.is_completed exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "453": {
      "error": "Swap must be completed or expired",
      "op": "assert // Swap must be completed or expired",
      "stack_out": []
    },
    "454": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "456": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "457": {
      "op": "bytec_1 // \"maker\"",
      "defined_out": [
        "\"maker\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"maker\""
      ]
    },
    "458": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "459": {
      "error": "check self.maker exists",
      "op": "assert // check self.maker exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0"
      ]
    },
    "460": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "461": {
      "error": "Only maker can delete",
      "op": "assert // Only maker can delete",
      "stack_out": []
    },
    "462": {
      "retsub": true,
      "op": "retsub"
    }
  }
}